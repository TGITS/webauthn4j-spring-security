/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "org.springframework.boot"
    id "io.spring.dependency-management"
}

group 'net.sharplab.springframework.security.extensions'
description = "Spring Security WebAuthn Angular Sample"

repositories {
    flatDir {
        dirs "../../../../libs"
    }
}

bootJar {
    baseName = "spring-security-webauthn-sample-spa"
    version = null
}

dependencies {
    // Custom Spring Security
    implementation('org.springframework.security:spring-security-core:5.1.0.BUILD-SNAPSHOT')
    implementation('org.springframework.security:spring-security-config:5.1.0.BUILD-SNAPSHOT')
    implementation('org.springframework.security:spring-security-web:5.1.0.BUILD-SNAPSHOT')

    implementation project(':spring-security-webauthn-core')
    implementation project(':spring-security-webauthn-fido-server')

    // Spring Framework
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-security')

    implementation("com.fasterxml.jackson.core:jackson-databind")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor")


    //Terasoluna
    implementation("org.terasoluna.gfw:terasoluna-gfw-common:${terasolunaVersion}")
    implementation("org.terasoluna.gfw:terasoluna-gfw-web:${terasolunaVersion}")

    //Others
    implementation("org.slf4j:jcl-over-slf4j")
    implementation('ch.qos.logback:logback-classic')
    implementation('javax.xml.bind:jaxb-api')
    implementation("org.modelmapper:modelmapper:${modelMapperVersion}")
    implementation('org.flywaydb:flyway-core')
    implementation('com.h2database:h2')
    implementation('mysql:mysql-connector-java')
    implementation("org.lazyluke:log4jdbc-remix:${log4jdbcVersion}")

    //Test
    testImplementation("com.webauthn4j:webauthn4j-test:${webauthn4jVersion}")
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    testImplementation('junit:junit')
    testImplementation('org.mockito:mockito-core')
    testImplementation('org.assertj:assertj-core')
    testImplementation("org.dbunit:dbunit:${dbunitVersion}")
    testImplementation("com.github.springtestdbunit:spring-test-dbunit:${springTestDbunitVersion}")

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.security:spring-security-bom:${springSecurityVersion}"
    }
}

sonarqube {
    skipProject = true
}
